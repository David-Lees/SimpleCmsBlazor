@using SimpleCmsBlazor.Services
@inject ISiteService siteService
@inject IMediaService mediaService
@inject IHxMessageBoxService _messageBoxService
@layout Admin
@page "/admin"

<div class="flex">
    <!-- Sidebar -->
    <div class="sidebar">
        <HxTooltip Text="Show/hide pages">
            <HxButton OnClick="() => showPages = !showPages">
                <HxIcon Icon="@BootstrapIcon.List" CssClass="fa-2x" />
            </HxButton>
        </HxTooltip>
    </div>
    <!-- End Sidebar -->
    <!-- Pages -->
    @if (showPages)
    {
        <div class="pages">
            <HxContextMenu Icon="@BootstrapIcon.ThreeDots" IconCssClass="fa-lg" CssClass="float-end">
                <HxContextMenuItem OnClick="@AddPage">Add Page</HxContextMenuItem>
                @if (activePage != null)
                {
                    <HxContextMenuItem OnClick="@AddChild">Add Child Page</HxContextMenuItem>
                }
                @if (CanDelete())
                {
                    <HxContextMenuItem OnClick="@DeletePage">Delete @activePage?.Name</HxContextMenuItem>
                }
            </HxContextMenu>
            <h5 class="mt-0">Pages</h5>
            <p>Drag and drop pages to rearrange order.</p>
            @if (site != null)
            {
                <div class="node-item">
                    <Dropzone Items="site.Pages" Accepts="@AcceptDrop">
                        <AdminContentItem Node="@context" ActivePage="@activePage" NodeClick="@NodeClick" ExpandedNodes="@expandedNodes"></AdminContentItem>
                    </Dropzone>
                </div>
            }
        </div>
    }
    <!-- End Pages -->
    <!-- Body -->
    <div class="body">
        <div class="float-end">
            <HxButton Color="@ThemeColor.Primary" OnClick="@SaveAsync">Save site</HxButton>
        </div>
        @if (activePage != null)
        {
            <h5 class="mt-0">Edit Page: @activePage.Name</h5>
        }
        else
        {
            <h5 class="mt-0">Edit Page</h5>
        }
        @if (site != null && site.Pages != null && site.Pages.Count > 0 && activePage != null)
        {
            <h2 class="container-fluid">Properties for @activePage.Name</h2>
            <app-edit-page [(page)]="activePage"></app-edit-page>
        }
    </div>
    <!-- End Body -->
</div>

@code {
    public bool showPages = true;
    public Page? activePage { get; set; }
    public Site? site { get; set; }
    public bool loaded = false;
    public List<string> expandedNodes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    public void AddPage()
    {
        if (site != null)
        {
            site.Pages.Add(NewPage());
        }
    }

    public void AddChild()
    {
        activePage?.Pages.Add(NewPage());
    }

    public bool CanDelete()
    {
        return true;
    }

    private Page NewPage()
    {
        return new Page
            {
                Id = Guid.NewGuid().ToString(),
                Name = "New page",
                Url = "new-page",
                Sections = new(),
                Pages = new(),
            };
    }

    public void Remove(Page p)
    {
        if (site != null && site.Pages.Contains(p))
        {
            site.Pages.Remove(p);
        }
    }

    public async Task SaveAsync()
    {
        if (site != null)
        {
            await siteService.SaveSiteAsync(site);
        }
    }

    private async Task LoadAsync()
    {
        if (siteService != null)
        {
            site = await siteService.GetSiteAsync();
            if (string.IsNullOrEmpty(site.Id)) site.Id = Guid.NewGuid().ToString();
            loaded = true;
            activePage = site.Pages.FirstOrDefault();
        }
    }

    public bool IsExpanded(string id)
    {
        return expandedNodes.Contains(id);
    }

    public void NodeClick(Page node)
    {
        if (!string.IsNullOrEmpty(node.Id))
        {
            if (expandedNodes.Contains(node.Id))
            {
                expandedNodes.Remove(node.Id);
            }
            else
            {
                expandedNodes.Add(node.Id);
            }
            var p = GetNode(node.Id);
            activePage = p as Page;
        }
    }

    public IPageList? GetNode(string id, IPageList? nodesToSearch = null)
    {
        if (id == "main") return site;
        nodesToSearch ??= site;
        if (nodesToSearch != null)
        {
            foreach (var node in nodesToSearch.Pages)
            {
                if (node.Id == id) return node;
                var ret = GetNode(id, node);
                if (ret != null) return ret;
            }
        }
        return null;
    }

    public bool AcceptDrop(Page droppedItem, Page? target)
    {
        if (target == null) return true;
        return ContainsPage(droppedItem, target);
    }

    private bool ContainsPage(Page item, Page parent)
    {
        if (parent.Pages.Contains(item)) return true;
        foreach (var p in parent.Pages)
        {
            if (ContainsPage(item, p)) return true;
        }
        return false;
    }

    public IPageList? GetParentNode(string id, IPageList? nodesToSearch = null)
    {
        if (id == "main") return site;
        nodesToSearch ??= site;
        if (nodesToSearch != null)
        {
            foreach (var node in nodesToSearch.Pages ?? new())
            {
                if (node.Id == id) return nodesToSearch;
                return GetParentNode(id, node);
            }
        }
        return null;
    }

    public async Task DeletePage()
    {
        if (activePage != null && await _messageBoxService.ConfirmAsync("Confirm Delete", "Are you sure you want to delete this page?"))
        {
            var sourceFolder = GetParentNode(activePage.Id ?? string.Empty);
            if (sourceFolder != null)
            {
                var i = sourceFolder.Pages.FirstOrDefault(c => c.Id == activePage.Id);
                if (i != null)
                {
                    sourceFolder.Pages.Remove(i);
                }
            }
        }
    }
}

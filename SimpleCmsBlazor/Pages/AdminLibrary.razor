@using SimpleCmsBlazor.Services
@inject IFolderService _folderService
@inject IMediaService _mediaService
@inject IHxMessageBoxService _messageBoxService
@layout Admin
@page "/admin/library"

<div class="flex">
    <!-- Sidebar -->
    <div class="sidebar">
        <HxTooltip Text="Show/hide folders">
            <HxButton OnClick="@(() => showFolders = !showFolders)">
                <HxIcon Icon="@BootstrapIcon.List" CssClass="fa-2x" />
            </HxButton>
        </HxTooltip>
        <HxTooltip Text="Upload">
            <HxButton OnClick="@Upload">
                <HxIcon Icon="@BootstrapIcon.CloudUpload" CssClass="fa-2x" />
            </HxButton>
        </HxTooltip>
    </div>
    <!-- End Sidebar -->
    <!-- Folders -->
    @if (showFolders)
    {
        <div class="folders">
            <HxContextMenu Icon="@BootstrapIcon.ThreeDots" CssClass="float-end" IconCssClass="fa-lg">
                <HxContextMenuItem OnClick="@AddFolder">Add Folder</HxContextMenuItem>
                @if (CanRename())
                {
                    <HxContextMenuItem OnClick="@RenameFolder">Rename @currentFolder?.Name</HxContextMenuItem>
                }
                @if (CanDelete())
                {
                    <HxContextMenuItem OnClick="@DeleteFolder">Delete @currentFolder?.Name</HxContextMenuItem>
                }
            </HxContextMenu>
            <h5 class="mt-0">Folders</h5>
            <MediaTree SelectedFolder="@currentFolder" SelectedChanged="@FolderChange"></MediaTree>
        </div>
    }
    <!-- End Folders -->
    <!-- Body -->
    <div class="body">
        @if (currentFolder != null)
        {
            <h5>Media for folder: @currentFolder.Name</h5>
        }
        @if (currentFolder != null && images.Count > 0)
        {
            <MediaList Images="@images" CanSort="true" CanDelete="true" CanMove="true" Moved="@Move" Deleted="@Delete" />
        }
    </div>
    <!-- End Body -->
</div>
<FolderSelect @ref="folderSelect" />
<TextDialog @ref="textDialog" />
<MaterialFileUpload @ref="upload" />

@code {
    FolderSelect? folderSelect;
    TextDialog? textDialog;
    MaterialFileUpload upload;

    public async Task AddFolder()
    {
        if (textDialog != null)
        {
            textDialog.ButtonText = "Add";
            textDialog.Title = $"Add folder under {currentFolder?.Name ?? "root folder"}";
            textDialog.PromptText = folderName;
            var result = await textDialog.ShowAsync();
            if (result.Successful)
            {
                var newFolder = new GalleryFolder
                    {
                        PartitionKey = currentFolder?.RowKey ?? Guid.Empty,
                        RowKey = Guid.NewGuid(),
                        Name = result.Value
                    };
                if (_folderService != null)
                {
                    await _folderService.CreateAsync(newFolder);
                    await Reload();
                }
            }
        }
    }

    public async Task RenameFolder()
    {
        if (currentFolder != null && textDialog != null)
        {
            textDialog.ButtonText = "Rename";
            textDialog.Title = $"Rename {currentFolder.Name}";
            textDialog.PromptText = currentFolder.Name;
            var result = await textDialog.ShowAsync();
            if (result.Successful && currentFolder.Name != result.Value)
            {
                currentFolder.Name = result.Value;
                await _folderService.CreateAsync(currentFolder);
                await Reload();
            }
        }
    }

    public async Task DeleteFolder()
    {
        if (currentFolder != null && currentFolder.RowKey != Guid.Empty &&
            !folders.Any(x => x.PartitionKey == currentFolder.RowKey) &&
            !images.Any(x => x.PartitionKey == currentFolder.RowKey) &&
            await _messageBoxService.ConfirmAsync("Delete Folder", $"Are you sure you want to delete the {currentFolder.Name} folder?"))
        {
            await _folderService.DeleteAsync(currentFolder);
            await Reload();
        }
    }

    public bool CanDelete() => currentFolder != null &&
        !folders.Any(x => x.PartitionKey == currentFolder.RowKey) &&
        currentFolder.RowKey != Guid.Empty &&
        images.Count == 0;

    public bool CanRename() => currentFolder != null && currentFolder.RowKey != Guid.Empty;

    GalleryFolder? currentFolder;
    List<GalleryFolder> folders = new();
    bool showFolders = true;
    List<GalleryImage> images = new();
    string folderName = "New Folder";

    protected override async Task OnInitializedAsync()
    {
        await LoadFoldersAsync();
    }

    public async Task FolderChange(GalleryFolder? folder)
    {
        currentFolder = folder;
        images = folder != null ? await _folderService.GetImagesAsync(folder) : new();
        StateHasChanged();
    }

    public async Task LoadFoldersAsync()
    {
        folders = await _folderService.GetFoldersAsync();
        await FolderChange(folders.First(x => x.RowKey == Guid.Empty));
    }

    public async Task Delete(GalleryImage image)
    {
        await _mediaService.Delete(image);
        await FolderChange(currentFolder);
    }

    public async Task Reload()
    {
        var current = currentFolder?.RowKey;
        folders = await _folderService.GetFoldersAsync(true);
        var newFolder = folders.FirstOrDefault(x => x.RowKey == current);
        if (newFolder != null)
        {
            await FolderChange(newFolder);
        }
    }

    private async Task Upload()
    {
        await upload.ShowAsync();
        await FolderChange(currentFolder);
    }

    public async Task Move(GalleryImage image)
    {
        var result = await folderSelect.ShowAsync();
        if (result != null && result.Successful)
        {
            await _mediaService.Move(image, result.Value);
        }
        StateHasChanged();
    }
}

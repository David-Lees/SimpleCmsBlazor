@if (Section != null)
{
    switch (Section.Name)
    {
        case SectionType.GallerySection:
            <EditGallery @bind-Section:get="Section" @bind-Section:set="SetSection" OnChange="() => OnChange.InvokeAsync(null)" />
            break;

        case SectionType.BannerSection:
            <EditBanner @bind-Section:get="Section" @bind-Section:set="SetSection" OnChange="() => OnChange.InvokeAsync(null)" />
            break;

        case SectionType.HtmlSection:
            <EditHtml @bind-Section:get="Section" @bind-Section:set="SetSection" OnChange="() => OnChange.InvokeAsync(null)" />
            break;

        case SectionType.ChildrenSection:
            <EditChildren @bind-Section:get="Section" @bind-Section:set="SetSection" OnChange="() => OnChange.InvokeAsync(null)" />
            break;

        default:
            <EditText @bind-Section:get="Section" @bind-Section:set="SetSection" OnChange="() => OnChange.InvokeAsync(null)" />
            break;
    }
}

@inject ILogger<EditSection> Log
@code {
    private PageSection? _section;
    ObjectsComparer.Comparer<PageSection?> _comparer = new();

    [Parameter]
    public PageSection? Section { get; set; }

    private void SetSection(PageSection value)
    {
        if (_comparer.Compare(_section, value)) return;
        _section = value;
        SectionChanged.InvokeAsync(value);
    }

    [Parameter]
    public EventCallback<PageSection> SectionChanged { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }
}

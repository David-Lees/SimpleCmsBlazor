@using Markdig
@inject IJSRuntime _jsRuntime
@inject ILogger<EditText> Log

@if (Section != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-6 border border-dark">
                <div @ref="myInput"></div>
            </div>
            <div class="col-6 border border-dark">
                @((MarkupString)output)
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-3">
                Text
                <RadzenColorPicker @bind-Value=@Section.Colour ShowHSV="true" ShowRGBA="true" ShowColors="true" ShowButton="false" Change="@Change" />
            </div>
            <div class="col-3">
                Background
                <RadzenColorPicker @bind-Value=@Section.BackgroundColour ShowHSV="true" ShowRGBA="true" ShowColors="true" ShowButton="false" Change="@Change" />
            </div>
            <div class="col-6">
                <ColourContrast BackgroundColour="@back" TextColour="@text" />
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <div>Text Alignment</div>
                <HxRadioButtonList Inline="true"
                               TItem="Alignment"
                               TValue="string"
                               Data="@TextAlignments"
                               @bind-Value="Section.Align"
                               TextSelector="@(p => p.Description)"
                               ValueSelector="@(p => p.Value)" />
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <div>Image Alignment</div>
                <HxRadioButtonList Inline="true"
                               TItem="Alignment"
                               TValue="string"
                               Data="@Alignments"
                               @bind-Value="Section.BackgroundAlign"
                               TextSelector="@(p => p.Description)"
                               ValueSelector="@(p => p.Value)" />
            </div>
        </div>
    </div>
    <div class="mt-3">
        <EditBanner @bind-Section="@Section" />
    </div>
}


@code {
    private string text = string.Empty;
    private string back = string.Empty;

    [Parameter]
    public PageSection? Section { get; set; }

    [Parameter]
    public EventCallback<PageSection> SectionChanged { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    string output = string.Empty;
    MarkdownPipeline pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();

    private class Alignment
    {
        public string Value { get; set; }
        public string Description { get; set; }
        public Alignment(string value, string description)
        {
            Value = value;
            Description = description;
        }
    }

    private List<Alignment> Alignments = new()
    {
        new Alignment("left top","Top left"),
        new Alignment("left center","Centre Left"),
        new Alignment("left bottom","Bottom Left"),
        new Alignment("right top","Top Right"),
        new Alignment("right center","Centre Right"),
        new Alignment("right bottom","Bottom Right"),
        new Alignment("center top","Top Centre"),
        new Alignment("center center","Centered"),
        new Alignment("center bottom","Center Bottom"),
    };

    private List<Alignment> TextAlignments = new()
    {
        new Alignment("left", "Left"),
        new Alignment("center", "Centred"),
        new Alignment("right", "Right")
    };

    protected override void OnInitialized()
    {
        text = Section?.Colour ?? string.Empty;
        back = Section?.BackgroundColour ?? string.Empty;
        UpdateOutput();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("codemirror.create", myInput, Section?.Text ?? "Error", "markdown", DotNetObjectReference.Create(this));
        }
    }

    private void UpdateOutput()
    {
        output = Markdown.ToHtml(Section?.Text ?? string.Empty, pipeline);
    }

    private ElementReference myInput;

    [JSInvokable("UpdateField")]
    public Task UpdateField(string codeValue)
    {
        if (Section != null)
        {
            Log.LogInformation("EditText section text changed");
            Section.Text = codeValue;
            SectionChanged.InvokeAsync(Section);
            UpdateOutput();
            Change();
        }
        return Task.CompletedTask;
    }

    public void Change()
    {
        text = Section?.Colour ?? string.Empty;
        back = Section?.BackgroundColour ?? string.Empty;
        OnChange.InvokeAsync(null);
        StateHasChanged();
    }
}

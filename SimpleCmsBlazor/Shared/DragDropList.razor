@using SimpleCmsBlazor.Services
@implements IDisposable
@inject DragDropService DD
@typeparam TItem where TItem : new()

<div class="drop-list"
     ondragover="event.preventDefault()"
     @attributes="Options"
     @ondrop="async()=>await Drop(DropOnList)"
     @ondrop:stopPropagation="true">

    @if (Items.Count == 0 && EmptyView != null)
    {
        @: @EmptyView
    }
    @for (int j = 0; j < Items.Count; j++)
    {
        var index = j;
        var item = Items[j];
        if (j == 0)
        {
            <div @ondragenter=@(() => { overBefore[index] = true; StateHasChanged();})
                 @ondragleave="@(() => { overBefore[index] = false; StateHasChanged(); })"
                 @ondrop="async ()=>await Drop(DropBeforeItem, item)"
                 @ondrop:stopPropagation="true"
                 class="drop-target @(overBefore.ContainsKey(index) && overBefore[index] ? "over" : "")">
            </div>
        }
        <div ondragover="event.preventDefault()" @ondragenter="() => over[index] = true"
             @ondragleave="() => over[index] = false"
             @ondrop="async ()=>await Drop(DropOnItem, item)"
             @ondrop:stopPropagation="true"
             @ondragstart="()=> DragItem(item)"
             @ondragstart:stopPropagation="true"
             draggable="@AllowsDrag.ToString().ToLower()"
             class="drag-item @ItemTemplateClass @(over.ContainsKey(index) && over[index] ? "over" : "")">
            @if (ItemTemplate != null)
            {
                @: @ItemTemplate(item)
            }
        </div>
        <div @ondragover="() => overAfter[index] = true"
             @ondragleave="() => overAfter[index] = false"
             @ondrop="async ()=>await Drop(DropAfterItem,item)"
             @ondrop:stopPropagation="true"
             class="drop-target @(overAfter.ContainsKey(index) && overAfter[index] ? "over" : "")">
        </div>
    }
</div>

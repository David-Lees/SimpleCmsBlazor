@using SimpleCmsBlazor.Services
<div class="flex">
    <!-- Sidebar -->
    <div class="sidebar">
        <MatTooltip Tooltip="Show/hide pages">
            <MatButton @onclick="() => showPages = !showPages" Class="mt-3">
                <MatIcon Style="transform: scale(2);">@MatIconNames.List</MatIcon>
            </MatButton>
        </MatTooltip>
    </div>
    <!-- End Sidebar -->
    <!-- Pages -->
    @if (showPages)
    {
        <div class="pages">
            <MatButton Class="float-right" OnClick="@OpenMenu">
                <MatIcon Style="transform: scale(1.5)">@MatIconNames.More_horiz</MatIcon>
            </MatButton>
            <MatMenu @ref="menu">
                <MatList>
                    <MatListItem OnClick="@AddPage">Add Page</MatListItem>
                    @if (activePage != null)
                    {
                        <MatListItem OnClick="@AddChild">Add Child Page</MatListItem>
                    }
                    @if (CanDelete())
                    {
                        <MatListItem OnClick="@DeletePage">Delete @activePage?.Name</MatListItem>
                    }
                </MatList>
            </MatMenu>
            <h5 class="mt-0">Pages</h5>
            <p>Drag and drop pages to rearrange order.</p>
            @if (site != null)
            {
                <Dropzone Items="site.Pages" Accepts="@AcceptDrop">
                    <AdminContentItem Node="@context" ActivePage="@activePage" NodeClick="@NodeClick" ExpandedNodes="@expandedNodes"></AdminContentItem>
                </Dropzone>
            }
        </div>
    }
    <!-- End Pages -->
    <!-- Body -->
    <div class="body">
        <div class="float-right">
            <button mat-raised-button color="primary" (click)="save()">Save site</button>
        </div>

        <h5 class="mt-0" *ngIf="!activePage">Edit Page</h5>
        <h5 class="mt-0" *ngIf="activePage">Edit Page: {{ activePage.name }}</h5>
        <ng-container *ngIf="site && site.pages && site.pages.length && activePage">
            <h2 class="container-fluid">Properties for {{ activePage.name }}</h2>
            <app-edit-page [(page)]="activePage"></app-edit-page>
        </ng-container>
    </div>
    <!-- End Body -->
</div>

@inject ISiteService siteService;
@inject IMediaService mediaService;
@inject MatDialogService matDialogService;

@code {
    public bool showPages = true;
    public Page? activePage { get; set; }
    public Site? site { get; set; }
    public bool loaded = false;
    public List<string> expandedNodes = new();

    public BaseMatMenu? menu;

    public async Task OpenMenu()
    {
        if (menu != null)
        {
            await menu.OpenAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }


    public void AddPage()
    {
        if (site != null)
        {
            site.Pages.Add(NewPage());
        }
    }

    public void AddChild()
    {
        activePage?.Pages.Add(NewPage());
    }

    public bool CanDelete()
    {
        return true;
    }

    private Page NewPage()
    {
        return new Page
            {
                Id = Guid.NewGuid().ToString(),
                Name = "New page",
                Url = "new-page",
                Sections = new(),
                Pages = new(),
            };
    }

    public void Remove(Page p)
    {
        if (site != null && site.Pages.Contains(p))
        {
            site.Pages.Remove(p);
        }
    }

    public async Task SaveAsync()
    {
        if (site != null)
        {
            await siteService.SaveSiteAsync(site);
        }
    }

    private async Task LoadAsync()
    {
        if (siteService != null)
        {
            site = await siteService.GetSiteAsync();
            if (string.IsNullOrEmpty(site.Id)) site.Id = Guid.NewGuid().ToString();
            loaded = true;
            activePage = site.Pages.FirstOrDefault();
        }
    }

    public bool IsExpanded(string id)
    {
        return expandedNodes.Contains(id);
    }

    public void NodeClick(Page node)
    {
        if (!string.IsNullOrEmpty(node.Id))
        {
            if (expandedNodes.Contains(node.Id))
            {
                expandedNodes.Remove(node.Id);
            }
            else
            {
                expandedNodes.Add(node.Id);
            }
            var p = GetNode(node.Id);
            activePage = p as Page;
        }
    }

    public IPageList? GetNode(string id, IPageList? nodesToSearch = null)
    {
        if (id == "main") return site;
        nodesToSearch ??= site;
        if (nodesToSearch != null)
        {            
            foreach (var node in nodesToSearch.Pages)
            {
                if (node.Id == id) return node;
                var ret = GetNode(id, node);
                if (ret != null) return ret;
            }
        }
        return null;
    }

    public bool AcceptDrop(Page droppedItem,  Page? target)
    {
        if (target == null) return true;
        return ContainsPage(droppedItem, target);
    }

    private bool ContainsPage(Page item, Page parent)
    {
        if (parent.Pages.Contains(item)) return true;
        foreach(var p in parent.Pages)
        {
            if (ContainsPage(item, p)) return true;
        }
        return false;
    }

    public IPageList? GetParentNode(string id, IPageList? nodesToSearch = null)
    {
        if (id == "main") return site;
        nodesToSearch ??= site;
        if (nodesToSearch != null)
        {
            foreach (var node in nodesToSearch.Pages ?? new())
            {
                if (node.Id == id) return nodesToSearch;
                return GetParentNode(id, node);
            }
        }
        return null;
    }

    public async Task DeletePage()
    {
        if (activePage != null && await matDialogService.ConfirmAsync("Are you sure you want to delete this page?"))
        {
            var sourceFolder = GetParentNode(activePage.Id ?? string.Empty);
            if (sourceFolder != null)
            {
                var i = sourceFolder.Pages.FirstOrDefault(c => c.Id == activePage.Id);
                if (i != null)
                {
                    sourceFolder.Pages.Remove(i);
                }
            }
        }
    }
}

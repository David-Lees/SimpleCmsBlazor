@if (Node != null)
{
    <div class="node-item m-0 p-0" data-id="@(Node.Id)" id="@($"node-{Node.Id}")">
        <div class="node-label">
            <div @onclick="@OnNodeClick" class="node-icons @(ActivePage?.Id == Node.Id ? "selected" : "")">
                @if (Node.Pages != null && Node.Pages.Count > 0)
                {
                    if (IsExpanded(Node.Id ?? string.Empty))
                    {
                        <HxIcon Icon="@BootstrapIcon.CaretDownFill" />
                        <HxIcon Icon="@BootstrapIcon.Folder2Open" />
                    }
                    else
                    {
                        <HxIcon Icon="@BootstrapIcon.CaretRightFill" />
                        <HxIcon Icon="@BootstrapIcon.Folder2" />
                    }
                }
                else
                {
                    <HxIcon Icon="@BootstrapIcon.CaretRightFill" CssClass="transparent" />
                    <HxIcon Icon="@BootstrapIcon.Folder2" />
                }
            </div>
            <div @onclick="@OnNodeClick" class="node-title">@Node.Name</div>
        </div>
        @if (IsExpanded(Node.Id ?? string.Empty) && Node.Pages?.Count > 0)
        {
            <div class="node-children" id="@Node.Id">
                <Dropzone Items="Node.Pages" Accepts="@AcceptDrop">
                    <AdminContentItem Node="@context" ActivePage="@ActivePage" NodeClick="@NodeClick" ExpandedNodes="@ExpandedNodes"></AdminContentItem>
                </Dropzone>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Page? Node { get; set; }

    [Parameter]
    public Page? ActivePage { get; set; }

    [Parameter]
    public EventCallback<Page> NodeClick { get; set; }

    [Parameter]
    public List<string> ExpandedNodes { get; set; } = new();

    public bool IsExpanded(string id) => ExpandedNodes.Contains(id);

    public async Task OnNodeClick()
    {
        await NodeClick.InvokeAsync(Node);
    }

    public bool AcceptDrop(Page droppedItem, Page? target)
    {
        if (target == null) return true;
        return ContainsPage(droppedItem, target);
    }

    private bool ContainsPage(Page item, Page parent)
    {
        if (parent.Pages.Contains(item)) return true;
        foreach (var p in parent.Pages)
        {
            if (ContainsPage(item, p)) return true;
        }
        return false;
    }
}

@inject ILogger<AdminContentItem> Log

@if (Node != null)
{
    <div class="node-item m-0 p-0" data-id="@(Node.Id)" id="@($"node-{Node.Id}")">
        <div class="node-label">
            <div @onclick="@OnNodeClick" class="node-icons @(ActivePage?.Id == Node.Id ? "selected" : "")">
                @if (Node.Pages != null && Node.Pages.Count > 0)
                {
                    if (IsExpanded(Node.Id ?? string.Empty))
                    {
                        <HxIcon Icon="@BootstrapIcon.CaretDownFill" />
                        <HxIcon Icon="@FontAwesome.FolderOpen" />
                    }
                    else
                    {
                        <HxIcon Icon="@BootstrapIcon.CaretRightFill" />
                        <HxIcon Icon="@FontAwesome.Folder" />
                    }
                }
                else
                {
                    <HxIcon Icon="@BootstrapIcon.CaretRightFill" CssClass="transparent" />
                    <HxIcon Icon="@FontAwesome.Folder" />
                }
            </div>
            <div @onclick="@OnNodeClick" class="node-title">@Node.Name</div>
        </div>
        <div class="node-children" id="@Node.Id">
            <DragDropList Items="Node.Pages" TItem="Page" Verify="@AcceptDrop">
                <ItemTemplate>
                    <AdminContentItem Node="@context" ActivePage="@ActivePage" NodeClick="@NodeClick" ExpandedNodes="@ExpandedNodes"></AdminContentItem>
                </ItemTemplate>
            </DragDropList>
        </div>

    </div>
}

@code {
    [Parameter]
    public Page? Node { get; set; }

    [Parameter]
    public Page? ActivePage { get; set; }

    [Parameter]
    public EventCallback<Page> NodeClick { get; set; }

    [Parameter]
    public List<string> ExpandedNodes { get; set; } = new();

    public bool IsExpanded(string id) => ExpandedNodes.Contains(id);

    public async Task OnNodeClick()
    {
        await NodeClick.InvokeAsync(Node);
    }

    public bool AcceptDrop(Page droppedItem)
    {
        if (Node == null)
        {
            Log.LogInformation("AcceptDrop target is null");
            return false;
        }
        var allowed = !ContainsPage(droppedItem, Node);
        Log.LogInformation("Accept Drop {allowed}", allowed);
        return allowed;
    }

    private bool ContainsPage(Page item, Page parent)
    {
        if (parent.Pages.Contains(item)) return true;
        foreach (var p in parent.Pages)
        {
            if (ContainsPage(item, p)) return true;
        }
        return false;
    }
}

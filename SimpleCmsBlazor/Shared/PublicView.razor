@using SimpleCmsBlazor.Services
@inject ISiteService SiteService
@inject NavigationManager NavManager

<PageTitle>@Page?.Name - @Site?.Name</PageTitle>

<Header site=@Site></Header>
<main class="main-body">
    @if (Page != null)
    {
        foreach (var s in Page.Sections)
        {
            <Section _section=@s _page=@Page></Section>
        }
    }
</main>
<footer class="container-fluid">
    <div class="row">
        <div class="col-sm-4 text-start">&copy; @Site.Name @GetYear()</div>
        <div class="col-sm-4 text-center"></div>
        <div class="col-sm-4 text-end">
            <LoginDisplay />            
        </div>
    </div>
</footer>



@code {

    [Parameter]
    public string? Path { get; set; }
    private string? _path;

    private Page? Page;
    private Site Site = new();

    protected override async Task OnInitializedAsync()
    {
        //Id = NavManager.Uri
        Site = await SiteService.GetSiteAsync();
        _path = Path;
        Page = FindPage(Path);
    }

    protected override void OnParametersSet()
    {
        if (Path != _path)
        {
            _path = Path;
            Page = FindPage(Path);
        }
    }

    private Page FindPage(string? url)
    {
        if (string.IsNullOrEmpty(url) || url == "/")
            return Site.Pages[0];

        var urls = url.Split('/');
        var page = Site as IPageList; ;
        Array.ForEach(urls, x => page = FindChildPage(x, page));
        if (page == Site) page = Site.Pages[0];
        return (Page)page ?? Site.Pages[0];
    }

    private Page? FindChildPage(string url, IPageList page)
    {
        if (page != null && page.Pages != null)
            return page.Pages.FirstOrDefault(x => x.Url?.ToLowerInvariant() == url.ToLowerInvariant());

        return null;
    }

    public string GetYear() => DateTime.Now.Year.ToString();
}

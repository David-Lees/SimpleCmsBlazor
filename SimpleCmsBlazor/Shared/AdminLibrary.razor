@using SimpleCmsBlazor.Services
@inject IMatDialogService _matDialogService
@inject IFolderService  _folderService
@inject IMediaService _mediaService

<div class="flex">
    <!-- Sidebar -->
    <div class="sidebar">
        <MatTooltip Tooltip="Show/hide folders">
            <MatButton OnClick="@(() => showFolders = !showFolders)">
                <MatIcon Style="transform: scale(2)">@MatIconNames.View_list</MatIcon>
            </MatButton>
        </MatTooltip>
        <MatTooltip Tooltip="Upload">
            <MatButton OnClick="@Upload" Class="mt-3"><MatIcon Style="transform: scale(2)">@MatIconNames.Cloud_upload</MatIcon></MatButton>
        </MatTooltip>
    </div>
    <!-- End Sidebar -->
    <!-- Folders -->
    @if (showFolders)
    {
        <div class="folders">
            <MatButton OnClick="@OpenMenu" RefBack="@buttonForwardRef">
                <MatIcon>@MatIconNames.More_horiz</MatIcon>
            </MatButton>
            <MatMenu @ref="Menu" TargetForwardRef="@buttonForwardRef">
                <MatList>
                    <MatListItem OnClick="@AddFolder">Add Folder</MatListItem>
                    @if (CanRename()) {
                        <MatListItem OnClick="@RenameFolder">Rename @currentFolder?.Name</MatListItem>
                    }
                    @if (CanDelete())
                    {
                        <MatListItem OnClick="@DeleteFolder">Delete @currentFolder?.Name</MatListItem>
                    }
                </MatList>
            </MatMenu>
            <h5 class="mt-0">Folders</h5>
            <MediaTree SelectedFolder="currentFolder" Node="@currentFolder" SelectedChanged="@FolderChange"></MediaTree>  
        </div>
    }
    <!-- End Folders -->
    <!-- Body -->
    <div class="body">
        <h5 *ngIf="currentFolder">Media for folder: {{ currentFolder.name }}</h5>
        <div class="" *ngIf="currentFolder && images.length">
            <app-media-list [(images)]="images"
                            [canSort]="true"
                            [canDelete]="true"
                            [canSelect]="false"
                            [canMove]="true"
                            (moved)="move($event)"
                            (delete)="delete($event)"></app-media-list>
        </div>
    </div>
    <!-- End Body -->
</div>

@code {
    ForwardRef buttonForwardRef = new();
    BaseMatMenu? Menu;

    public async Task OpenMenu(MouseEventArgs e)
    {
        if (Menu != null) {
            await Menu.OpenAsync();
        }
    }

    public async Task AddFolder()
    {
        var result = await _matDialogService.PromptAsync($"Add folder under {currentFolder?.Name ?? "root folder"}", folderName);
        if (!string.IsNullOrWhiteSpace(result))
        {
            var newFolder = new GalleryFolder
            {
                PartitionKey = currentFolder?.RowKey ?? Guid.Empty,
                RowKey = Guid.NewGuid(),
                Name = result
            };
            if (_folderService != null)
            {
                await _folderService.CreateAsync(newFolder);
                await Reload();                
            }
        }
    }

    public async Task RenameFolder()
    {
        if (currentFolder != null)
        {
            var result = await _matDialogService.PromptAsync($"Rename {currentFolder.Name} to:", currentFolder.Name);
            if (!string.IsNullOrWhiteSpace(result) && currentFolder.Name != result)
            {
                currentFolder.Name = result;
                await _folderService.CreateAsync(currentFolder);
                await Reload();
            }
        }
    }

    public async Task DeleteFolder()
    {
        if (currentFolder != null && currentFolder.RowKey != Guid.Empty &&
            !folders.Any(x => x.PartitionKey == currentFolder.RowKey) &&
            !images.Any(x => x.PartitionKey == currentFolder.RowKey) &&
            await _matDialogService.ConfirmAsync($"Are you sure you want to delete the {currentFolder.Name} folder?"))
        {
            await _folderService.DeleteAsync(currentFolder);
            await Reload();
        }
    }

    public bool CanDelete() => currentFolder != null && 
        !folders.Any(x => x.PartitionKey == currentFolder.RowKey) &&
        currentFolder.RowKey != Guid.Empty &&
        images.Count == 0;

    public bool CanRename() => currentFolder != null && currentFolder.RowKey != Guid.Empty;

    GalleryFolder? currentFolder;
    List<GalleryFolder> folders = new();
    bool showFolders = true;
    List<GalleryImage> images = new();
    string folderName = "New Folder";

    protected override async Task OnInitializedAsync()
    {
        await LoadFoldersAsync();
    }

    public async Task FolderChange(GalleryFolder? folder)
    {
        currentFolder = folder;                
        images = folder != null ? await _folderService.GetImagesAsync(folder) : new();
        StateHasChanged();
    }

    public async Task LoadFoldersAsync()
    {
        folders = await _folderService.GetFoldersAsync();
        await FolderChange(folders.First(x => x.RowKey == Guid.Empty));
    }

    public async Task Delete(GalleryImage image)
    {
        await _mediaService.Delete(image);
        await FolderChange(currentFolder);    
    }

    public async Task Reload()
    {
        var current = currentFolder?.RowKey;
        folders = await _folderService.GetFoldersAsync(true);
        var newFolder = folders.FirstOrDefault(x => x.RowKey == current);
        if (newFolder != null) 
        {
            await FolderChange(newFolder);
        }    
    }

    private async Task Upload()
    {
        await _matDialogService.OpenAsync(typeof(MaterialFileUpload), null);
        await FolderChange(currentFolder);
    }

    public async Task Move(GalleryImage image)
    {
        var result = await _matDialogService.OpenAsync(typeof(FolderSelect), null);
        if (result != null && result is GalleryFolder folder)
        {
            await _mediaService.Move(image, folder);
        }
        StateHasChanged();
    } 
}
